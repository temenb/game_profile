// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: mail.proto

/* eslint-disable */
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty } from "./common/empty";
import { HealthReport, LiveStatus, ReadyStatus, StatusInfo } from "./common/health";

export const protobufPackage = "mail";

export type MailService = typeof MailService;
export const MailService = {
  health: {
    path: "/mail.Mail/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: HealthReport): Buffer => Buffer.from(HealthReport.encode(value).finish()),
    responseDeserialize: (value: Buffer): HealthReport => HealthReport.decode(value),
  },
  status: {
    path: "/mail.Mail/Status",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: StatusInfo): Buffer => Buffer.from(StatusInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer): StatusInfo => StatusInfo.decode(value),
  },
  livez: {
    path: "/mail.Mail/Livez",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: LiveStatus): Buffer => Buffer.from(LiveStatus.encode(value).finish()),
    responseDeserialize: (value: Buffer): LiveStatus => LiveStatus.decode(value),
  },
  readyz: {
    path: "/mail.Mail/Readyz",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: ReadyStatus): Buffer => Buffer.from(ReadyStatus.encode(value).finish()),
    responseDeserialize: (value: Buffer): ReadyStatus => ReadyStatus.decode(value),
  },
} as const;

export interface MailServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, HealthReport>;
  status: handleUnaryCall<Empty, StatusInfo>;
  livez: handleUnaryCall<Empty, LiveStatus>;
  readyz: handleUnaryCall<Empty, ReadyStatus>;
}

export interface MailClient extends Client {
  health(request: Empty, callback: (error: ServiceError | null, response: HealthReport) => void): ClientUnaryCall;
  health(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HealthReport) => void,
  ): ClientUnaryCall;
  health(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HealthReport) => void,
  ): ClientUnaryCall;
  status(request: Empty, callback: (error: ServiceError | null, response: StatusInfo) => void): ClientUnaryCall;
  status(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StatusInfo) => void,
  ): ClientUnaryCall;
  status(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StatusInfo) => void,
  ): ClientUnaryCall;
  livez(request: Empty, callback: (error: ServiceError | null, response: LiveStatus) => void): ClientUnaryCall;
  livez(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LiveStatus) => void,
  ): ClientUnaryCall;
  livez(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LiveStatus) => void,
  ): ClientUnaryCall;
  readyz(request: Empty, callback: (error: ServiceError | null, response: ReadyStatus) => void): ClientUnaryCall;
  readyz(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ReadyStatus) => void,
  ): ClientUnaryCall;
  readyz(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ReadyStatus) => void,
  ): ClientUnaryCall;
}

export const MailClient = makeGenericClientConstructor(MailService, "mail.Mail") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MailClient;
  service: typeof MailService;
  serviceName: string;
};
